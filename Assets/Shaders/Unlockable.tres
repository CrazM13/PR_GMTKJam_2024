[gd_resource type="VisualShader" load_steps=8 format=3 uid="uid://csmuwesiqvs8h"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_384gs"]
source = 2

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_0anej"]
parameter_name = "IsUnlocked"

[sub_resource type="VisualShaderNodeSwitch" id="VisualShaderNodeSwitch_7j6uw"]
default_input_values = [0, false, 1, Vector3(1, 1, 1), 2, Vector3(0.25, 0.25, 0.25)]
op_type = 4

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_bk4r2"]
constant = Color(0.25098, 0.25098, 0.25098, 1)

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_j0188"]
operator = 4

[sub_resource type="VisualShaderNodeColorFunc" id="VisualShaderNodeColorFunc_raxq1"]

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_qsreb"]
operator = 4

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform bool IsUnlocked;



void fragment() {
// BooleanParameter:3
	bool n_out3p0 = IsUnlocked;


	vec4 n_out2p0;
// Texture2D:2
	n_out2p0 = texture(TEXTURE, UV);


// ColorConstant:5
	vec4 n_out5p0 = vec4(0.250980, 0.250980, 0.250980, 1.000000);


	vec3 n_out7p0;
// ColorFunc:7
	{
		vec3 c = vec3(n_out2p0.xyz);
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		n_out7p0 = vec3(max2, max2, max2);
	}


	vec3 n_out6p0;
// ColorOp:6
	{
		float base = vec3(n_out5p0.xyz).x;
		float blend = n_out7p0.x;
		if (base < 0.5) {
			n_out6p0.x = 2.0 * base * blend;
		} else {
			n_out6p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out5p0.xyz).y;
		float blend = n_out7p0.y;
		if (base < 0.5) {
			n_out6p0.y = 2.0 * base * blend;
		} else {
			n_out6p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = vec3(n_out5p0.xyz).z;
		float blend = n_out7p0.z;
		if (base < 0.5) {
			n_out6p0.z = 2.0 * base * blend;
		} else {
			n_out6p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}


	vec3 n_out8p0;
// ColorOp:8
	{
		float base = n_out6p0.x;
		float blend = vec3(n_out5p0.xyz).x;
		if (base < 0.5) {
			n_out8p0.x = 2.0 * base * blend;
		} else {
			n_out8p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out6p0.y;
		float blend = vec3(n_out5p0.xyz).y;
		if (base < 0.5) {
			n_out8p0.y = 2.0 * base * blend;
		} else {
			n_out8p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out6p0.z;
		float blend = vec3(n_out5p0.xyz).z;
		if (base < 0.5) {
			n_out8p0.z = 2.0 * base * blend;
		} else {
			n_out8p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}


	vec3 n_out4p0;
// Switch:4
	n_out4p0 = mix(n_out8p0, vec3(n_out2p0.xyz), float(n_out3p0));


// Output:0
	COLOR.rgb = n_out4p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1100, 700)
nodes/fragment/2/node = SubResource("VisualShaderNodeTexture_384gs")
nodes/fragment/2/position = Vector2(-240, 740)
nodes/fragment/3/node = SubResource("VisualShaderNodeBooleanParameter_0anej")
nodes/fragment/3/position = Vector2(-240, 340)
nodes/fragment/4/node = SubResource("VisualShaderNodeSwitch_7j6uw")
nodes/fragment/4/position = Vector2(820, 660)
nodes/fragment/5/node = SubResource("VisualShaderNodeColorConstant_bk4r2")
nodes/fragment/5/position = Vector2(-120, 560)
nodes/fragment/6/node = SubResource("VisualShaderNodeColorOp_j0188")
nodes/fragment/6/position = Vector2(380, 700)
nodes/fragment/7/node = SubResource("VisualShaderNodeColorFunc_raxq1")
nodes/fragment/7/position = Vector2(100, 760)
nodes/fragment/8/node = SubResource("VisualShaderNodeColorOp_qsreb")
nodes/fragment/8/position = Vector2(600, 700)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 4, 0, 0, 0, 2, 0, 4, 1, 2, 0, 7, 0, 5, 0, 6, 0, 7, 0, 6, 1, 6, 0, 8, 0, 5, 0, 8, 1, 8, 0, 4, 2)
